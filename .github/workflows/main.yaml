name: Pi-hole & Dynatrace Deployment on Azure

on:
  workflow_dispatch:

jobs:
  provision-vms:
    name: Provisions all Azure resources (VMs, IPs, etc.)
    runs-on: ubuntu-latest
    env:
      AZURE_RESOURCE_GROUP: pihole-dynatrace-rg
      AZURE_LOCATION: eastus
      PIHOLE_VM_NAME: pihole-vm
      DYNATRACE_VM_NAME: dynatrace-vm
      VM_USERNAME: nicolasnk
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Run PowerShell provisioning script
        shell: pwsh
        run: |
          ./Invoke-AzureProvisioning.ps1 -resourceGroupName $env:AZURE_RESOURCE_GROUP -location $env:AZURE_LOCATION -vmPiholeName $env:PIHOLE_VM_NAME -vmDynatraceName $env:DYNATRACE_VM_NAME -username $env:VM_USERNAME -sshKeyContent '${{ secrets.SSH_PUBLIC_KEY }}'

  install-applications:
    name: Installs applications on the VMs
    runs-on: ubuntu-latest
    needs: provision-vms
    env:
      AZURE_RESOURCE_GROUP: pihole-dynatrace-rg
      VM_USERNAME: nicolasnk
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up SSH key for VMs
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get Pi-hole VM Public IP
        id: get-pihole-ip
        run: |
          PIHOLE_IP=$(az network public-ip show --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --name "pihole-public-ip" --query "ipAddress" -o tsv)
          echo "PIHOLE_IP=$PIHOLE_IP" >> $GITHUB_ENV
          echo "Pi-hole VM IP: $PIHOLE_IP"
      - name: Get Dynatrace VM Public IP
        id: get-dynatrace-ip
        run: |
          DYNATRACE_IP=$(az network public-ip show --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --name "dynatrace-public-ip" --query "ipAddress" -o tsv)
          echo "DYNATRACE_IP=$DYNATRACE_IP" >> $GITHUB_ENV
          echo "Dynatrace VM IP: $DYNATRACE_IP"
      - name: Install Pi-hole
        shell: pwsh
        run: |
          ./provision-pihole-dynatrace.ps1 -VmPublicIp "${{ env.PIHOLE_IP }}" -VmUsername "${{ env.VM_USERNAME }}" -SshPrivateKeyPath "~/.ssh/id_rsa"
      - name: Wait for Pi-hole to stabilize
        run: |
          echo "Waiting 60 seconds for Pi-hole to stabilize..."
          sleep 60
      - name: Verify Pi-hole installation
        run: |
          PIHOLE_STATUS=$(ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.VM_USERNAME }}@${{ env.PIHOLE_IP }} "sudo systemctl is-active pihole-FTL" || echo "failed")
          if [ "$PIHOLE_STATUS" != "active" ]; then
            echo "Error: Pi-hole installation failed or service is not running on ${{ env.PIHOLE_IP }}. Status: $PIHOLE_STATUS"
            exit 1
          else
            echo "Pi-hole is running on ${{ env.PIHOLE_IP }}"
          fi
      - name: Install Dynatrace
        shell: pwsh
        run: |
          ./provision-pihole-dynatrace.ps1 -VmPublicIp "${{ env.DYNATRACE_IP }}" -VmUsername "${{ env.VM_USERNAME }}" -SshPrivateKeyPath "~/.ssh/id_rsa"
      - name: Wait for Dynatrace to stabilize
        run: |
          echo "Waiting 60 seconds for Dynatrace to stabilize..."
          sleep 60
      - name: Verify Dynatrace installation
        run: |
          DYNATRACE_STATUS=$(ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.VM_USERNAME }}@${{ env.DYNATRACE_IP }} "pgrep -f dynatrace || echo 'failed'" || echo "failed")
          if [ "$DYNATRACE_STATUS" = "failed" ]; then
            echo "Error: Dynatrace installation failed or service is not running on ${{ env.DYNATRACE_IP }}."
            exit 1
          else
            echo "Dynatrace is running on ${{ env.DYNATRACE_IP }}"
          fi

  cleanup-resources:
    name: Cleans up resources on failure
    runs-on: ubuntu-latest
    needs: [install-applications]
    if: failure()
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Clean up resources
        run: |
          az group delete --name "pihole-dynatrace-rg" --yes --no-wait